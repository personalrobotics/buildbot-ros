#!/usr/bin/env python
# buildbot-ros configuration file
from buildbot_ros_cfg.ros_deb import ros_debbuild
from buildbot_ros_cfg.ros_test import ros_testbuild
from buildbot_ros_cfg.ros_doc import ros_docbuild
from buildbot_ros_cfg.launchpad_deb import launchpad_debbuild
from buildbot_ros_cfg.distro import *

from buildbot.schedulers import forcesched, timed

from buildbot.status import html
from buildbot.status.web import authz, auth

from buildbot.buildslave import BuildSlave

from rosdistro import get_index

import yaml
with open('config.yaml', 'r') as config_file:
    external_config = yaml.load(config_file)

# BuildMasterConfig
c = BuildmasterConfig = {}
c['title'] = external_config['title']
c['titleURL'] = external_config['title_url']
c['buildbotURL'] = external_config['title_url']
c['builders'] = []
c['change_source'] = []
c['schedulers'] = []

c['db'] = {
    # This specifies what database buildbot uses to store its state. You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

# Web front end
authz_cfg=authz.Authz(
    gracefulShutdown = True,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'] = []
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# Build Machines
# TODO: Generate this configuration from Puppet.
#BuildSlave('cortana', external_config['buildslave_pass'], max_builds=2),
c['slaves'] = [ BuildSlave('hudson', external_config['buildslave_pass'], max_builds=4), ]
c['slavePortnum'] = external_config['buildslave_port']
BUILDERS = [ 'hudson' ]

# Locally clone the rosdistro file to bypass authentication.
import tempfile, os, subprocess
GIT_BINARY = '/usr/bin/git'
rosdistro_path = os.path.abspath('rosdistro')
rosdistro_url = external_config['rosdistro_url']

def git(path, args):
    subprocess.check_call([ GIT_BINARY ] + args, cwd=path)

if os.path.exists(rosdistro_path):
    print("Updating rosdistro '%s'." % rosdistro_path)
    git(rosdistro_path, [ 'reset', '--hard' ])
    git(rosdistro_path, [ 'pull', 'origin', 'master' ])
else:
    print("Cloning rosdistro '%s' to '%s'." % (rosdistro_url, rosdistro_path))
    git('.', [ 'clone', rosdistro_url, rosdistro_path ])

local_rosdistro_url = 'file://' + os.path.join(rosdistro_path, 'index.yaml')

# Load jobs from the rosdistro.
import rosdistro
rosindex = rosdistro.get_index(local_rosdistro_url)
dist_names = rosindex.distributions.keys()
oracle = RosDistroOracle(rosindex, dist_names)

# Setup jobs
DEB_JOBS = list()
TEST_JOBS = list()
DOC_JOBS = list()
LPD_JOBS = list()
nightlyDebNames = list()
nightlyDocNames = list()
for dist in dist_names:
    print('')
    print('Configuring for %s' % dist)

    # debian builder
    DEB_JOBS += debbuilders_from_rosdistro(c, oracle, dist, BUILDERS)

    # test jobs, triggered by source commit
    # TODO: Test jobs are temporarily disabled.
    #TEST_JOBS += testbuilders_from_rosdistro(c, oracle, dist, BUILDERS)

    # doc jobs
    DOC_JOBS = docbuilders_from_rosdistro(c, oracle, dist, BUILDERS)

    # get name of first of nightly debuilds for this distro
    build_files = get_release_build_files(oracle.getIndex(), dist)
    for build_file in build_files:
        for os in build_file.get_target_os_names():
            for code_name in build_file.get_target_os_code_names(os):
                for arch in build_file.get_target_arches(os, code_name):
                    name = oracle.getNightlyDebStart(dist)
                    if name is not None:
                        nightlyDebNames.append(name+'_'+dist+'_'+code_name+'_'+arch+'_debbuild')

    # get name of first nightly docbuilds for this distro
    nightly_doc_start = oracle.getNightlyDocStart(dist)
    if nightly_doc_start is not None:
        nightlyDocNames.append(nightly_doc_start+'_'+dist+'_docbuild')
    print('')

## Build debs at 2AM
#c['schedulers'].append(
#    timed.Nightly(
#        name = 'nightly-debbuild',
#        branch = 'master',
#        builderNames = nightlyDebNames,
#        hour=2,
#        minute=0
#    )
#)
#
## Build debs at 5AM
#c['schedulers'].append(
#    timed.Nightly(
#        name = 'nightly-docbuild',
#        branch = 'master',
#        builderNames = nightlyDocNames,
#        hour=5,
#        minute=0
#    )
#)

# Create a bogus job. At least one job is necessary for Buildbot to start.
if not c['builders']:
    from buildbot.config import BuilderConfig
    from buildbot.process.factory import BuildFactory
    from buildbot.steps.shell import ShellCommand
    factory = BuildFactory()
    factory.addStep(ShellCommand(command=['echo', 'hello', 'world']))
    c['builders'].append(BuilderConfig(name='empty_build', slavenames=['hudson'], factory=factory))

    c['schedulers'].append(
        forcesched.ForceScheduler(
            name='force',
            builderNames=[ 'empty_build' ],
        )
    )

else:
    c['schedulers'].append(
        forcesched.ForceScheduler(
            name='force',
            builderNames=DEB_JOBS+TEST_JOBS+DOC_JOBS+LPD_JOBS
        )
    )

